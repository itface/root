<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name>hello maven</display-name>	
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  <context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>springHibernateMaven</param-value>
	</context-param>
	<!-- log4j 配置  开始 -->
   <!--rootWebApplicationContext,启动服务时加载配置 -->
    <context-param>    
		<param-name>contextConfigLocation</param-name> 
		<param-value>classpath:applicationContext.xml</param-value>    
		<!-- param-value>classpath:applicationContext.xml,classpath:spring-jpa.xml,classpath:spring-security.xml,classpath:spring-activemq.xml</param-value-->    
	</context-param>    
    <!-- 
    结束配置OpenEntityManagerInViewFilter，用了这类Filter以后会降低一定的运行效率，但是一般的web项目都会加入一些开源的缓存管理框架，这样一来，对效率的影响就变得很小了。
     -->
     <!--ContextLoaderListener作用：在启动Web容器时，自动装配Spring applicationContext.xml的配置信息，可以指定自己的定义档，只要在<context-param>中指定"contextConfigLocation"参数 -->
     <listener>    
	  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>    
	</listener>

    <!-- 支持Spring的session, request, 自定义scope
    如果你用Spring Web MVC，即用SpringDispatcherServlet或DispatcherPortlet来处理请求，则不需要做特别的配置：DispatcherServlet 和 DispatcherPortlet已经处理了所有有关的状态.
    当使用了Spring's DispatcherServlet以外的Servlet 2.4及以上的Web容器时（如使用JSF或Struts），你需要在添加此定义
     -->
	<!--listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
    < filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping-->
	<!-- spring security end-->
  <servlet>
      <servlet-name>springmvc</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
      			<!-- springmvc容器加载，由第一次请求时初始化 -->
	           <param-name>contextConfigLocation</param-name>
	           <param-value>classpath:springmvc-servlet.xml</param-value>
	  </init-param>
      <load-on-startup>2</load-on-startup>
  </servlet>
  <servlet-mapping>
      <servlet-name>springmvc</servlet-name>
      <url-pattern>/</url-pattern>
  </servlet-mapping>
	<filter>
	    <filter-name>CharacterEncodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>utf-8</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
	    <filter-name>CharacterEncodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>  
	    <filter-name>HiddenHttpMethodFilter</filter-name>  
	    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>  
	</filter>   
	<filter-mapping>  
	    <filter-name>HiddenHttpMethodFilter</filter-name>  
	    <servlet-name>springmvc</servlet-name>  
	</filter-mapping> 
</web-app>
